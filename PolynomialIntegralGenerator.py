import random, fractions
def polynomialintegralgenerator(Integral, question, answer, questionsheet, answersheet):
    question.append(str("=" + str("".join([specialcases.replace(" 1 ", "").replace(" -1 ", "-").replace("+ ", "+").replace(" x", "x").replace("^1", "").replace("x^0", "").replace("+-", "-") for specialcases in ["+" + plus for plus in [term for term in [" " + str(Integral[power]) + " x^" + str(power) for power in reversed(range(len(Integral)))] if " 0 x" not in term]]])) + " ").replace("=+", "").replace("=-", "-").replace("+ ", "+1 ").replace("- ", "-1 ")), answer.append(str("=" + str("".join([specialcases.replace(" 1 ", "").replace(" -1 ", "-").replace("+ ", "+").replace(" x", "x").replace("^1", "").replace("x^0", "").replace("+-", "-") for specialcases in ["+" + plus for plus in [term for term in [(" " + str(int(Integral[power] * (1 / (power + 1)))) + " x^" + str(power + 1)) if float(Integral[power] * (1 / (power + 1))).is_integer() else (" \\frac{" + str(abs(fractions.Fraction(Integral[power] * (1 / (power + 1))).limit_denominator().numerator)) + "}{" + str(fractions.Fraction(Integral[power] * (1 / (power + 1))).limit_denominator().denominator) + "}x^" + str(power + 1)) if Integral[power] * (1 / (power + 1)) > 0 else (" -\\frac{" + str(abs(fractions.Fraction(Integral[power] * (1 / (power + 1))).limit_denominator().numerator)) + "}{" + str(fractions.Fraction(Integral[power] * (1 / (power + 1))).limit_denominator().denominator) + "}x^" + str(power + 1)) for power in reversed(range(len(Integral)))] if " 0 x" not in term]]])) + " ").replace("=+", "").replace("=-", "-").replace("x0", "x^{10}")[:-1] + "+C")
    with open(questionsheet, "a") as f1, open(answersheet, "a") as f2:
       f1.write("\\item $\\displaystyle \\int " + question[0][:-1] + "\\, \\, dx=\\cdots$\n"),  f2.write("\\item $\\displaystyle " + answer[0] + "$\n")